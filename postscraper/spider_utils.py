from scrapy.utils import misc, spider

from postscraper import autogenerate
from postscraper import exc
from postscraper import settings
"""
The methods for spider info retrieval - listing by name/by url,
existance checks.
"""


def find_spiders(type=None):
    """Find all classes that subclass scrapy.Spider

    If type is given then the output is filtered by type.
    Possible type values ['vk', 'site'].
    """

    spider_map = {}

    def _get_spiders(spiders, spider_map):
        """Returns a list of all spiders with unique name found in a module

        If 2 spiders with the same name are found, that subclass one another,
        then the child one is taken (based on mro)
        """
        # if two spiders with the same name are found, then take the one that
        # subclasses the autogenerated
        for s in spiders:
            if s.name in spider_map:
                # leave only the one that subclasses parent
                old = spider_map[s.name]
                if old in s.mro():
                    spider_map[s.name] = s
            else:
                spider_map[s.name] = s
        # the same one as passed with new values
        return spider_map

    for module in misc.walk_modules(settings.NEWSPIDER_MODULE):
        # crawl responsibly
        spiders = [s for s in spider.iter_spider_classes(module)
                   if s.type == type and type or not type]
        _get_spiders(spiders, spider_map)
    # add user generated modules
    user_spiders = autogenerate.load_spiders_from_json(
        settings.USER_SPIDERS_FILE)
    _get_spiders(user_spiders, spider_map)
    # check for name uniqueness
    return spider_map.values()


def find_spider(type, name=None, owner_id=None):
    if not name and not owner_id:
        raise exc.VkSpiderException("Either name or owner_id should be set!")
    if name:
        return next((s for s in find_spiders(type=type) if s.name == name),
                    None)
    return next((s for s in find_spiders(type=type) if s.owner_id == owner_id),
                None)
